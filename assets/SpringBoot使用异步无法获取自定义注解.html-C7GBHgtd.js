import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as e,b as n}from"./app-BcAKAKCF.js";const a={},t=n(`<h2 id="一、前言" tabindex="-1"><a class="header-anchor" href="#一、前言"><span>一、前言</span></a></h2><p>在SpringBoot项目中，我们要开启异步执行其实很简单，只需要2步</p><ol><li>在启用类上加开启异步注解 <code>@EnableAsync</code></li><li>在对应的方法或者类上面加入标示开启异步的注解 <code>@Async</code></li></ol><br><h2 id="二、问题" tabindex="-1"><a class="header-anchor" href="#二、问题"><span>二、问题</span></a></h2><p>但是今天遇到一个问题，由于数据量的递增需把原来的方法改成异步。接到需求的时候眉头紧锁看似在思考如何处理，心里却想这难不倒我，两个注解即可完成。</p><p>但在实际操作中却出了问题，加上注解后启动项目报了空指针异常，经过定位发现错误是因为<strong>无法获取bean上自定义注解</strong>导致的。</p><br><h2 id="三、-inherited" tabindex="-1"><a class="header-anchor" href="#三、-inherited"><span>三、@Inherited</span></a></h2><p>在具体解决问题之前，我们先来了解一下这个 <code>@Inherited</code></p><p>@Inherited是一个标识，用来修饰注解 <mark>作用：如果一个类用上了@Inherited修饰的注解，那么其子类也会继承这个注解</mark></p><p><strong>注意：</strong></p><ol><li>接口用上个@Inherited修饰的注解，其实现类不会继承这个注解</li><li>父类的方法用了@Inherited修饰的注解，子类也不会继承这个注解</li><li>当用了@Inherited修饰的注解的@Retention是RetentionPolicy.RUNTIME，则增强了继承性，在反射中可以获取得到</li></ol><br><h2 id="四、-enableasync" tabindex="-1"><a class="header-anchor" href="#四、-enableasync"><span>四、@EnableAsync</span></a></h2><p>在使用<code>@EnableAsync</code> 开启异步的时候，其实是对类生成代理来实现，而默认是使用 <code>JDK代理</code>。</p><ul><li><strong>jdk代理</strong>：通过反射，对接口生成代理，生成的是和原类同级别的 <strong>兄弟关系</strong>。</li><li><strong>cglib代理</strong>：通过修改字节码，生成原类的子类是 <strong>父子关系</strong>。</li></ul><p><strong>jdk代理的是兄弟关系会导致 <code>@Inherited</code> 失效</strong></p><br><h2 id="五、解决" tabindex="-1"><a class="header-anchor" href="#五、解决"><span>五、解决</span></a></h2><h3 id="_5-1、在自定义注解上加入注解-inherited" tabindex="-1"><a class="header-anchor" href="#_5-1、在自定义注解上加入注解-inherited"><span>5-1、在自定义注解上加入注解 @Inherited</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;">Target</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">({</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">ElementType</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">TYPE</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">})</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;">Retention</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">RetentionPolicy</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">RUNTIME</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;">Documented</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;">Inherited</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> @</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">interface</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;"> CityMapHandleType</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">    CityMapTaskTypeEnum</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> sourceType</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">default</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> CityMapTaskTypeEnum</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">UNKNOWN</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h3 id="_5-2、开启cglig代理" tabindex="-1"><a class="header-anchor" href="#_5-2、开启cglig代理"><span>5-2、开启cglig代理</span></a></h3><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;">EnableAsync</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">proxyTargetClass</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> true</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><blockquote><p><strong>proxyTargetClass 字段的含义</strong> <br> 指示是否要创建基于子类 (CGLIB) 的代理，而不是创建标准的基于 Java 接口的代理。 仅当模式设置为 AdviceMode.PROXY 时才适用。 默认值为false。 请注意，将此属性设置为 true 将影响所有需要代理的 Spring 管理的 bean，而不仅仅是标有 @Async 的那些。例如，其他标有 Spring 的 @Transactional 注解的 bean 将同时升级为子类代理。这种方法在实践中没有负面影响，除非明确期望一种类型的代理与另一种类型的代理——例如，在测试中。</p></blockquote><p><br><br></p><p><strong>参考博客：</strong></p><ul><li>https://blog.csdn.net/qq_43390895/article/details/100175330</li><li>https://blog.csdn.net/qq_33609401/article/details/102614312</li></ul>`,29),l=[t];function r(h,p){return e(),s("div",null,l)}const c=i(a,[["render",r],["__file","SpringBoot使用异步无法获取自定义注解.html.vue"]]),k=JSON.parse('{"path":"/02SSM/02SpringBoot/SpringBoot%E4%BD%BF%E7%94%A8%E5%BC%82%E6%AD%A5%E6%97%A0%E6%B3%95%E8%8E%B7%E5%8F%96%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B3%A8%E8%A7%A3.html","title":"【初】SpringBoot使用异步无法获取自定义注解","lang":"zh-CN","frontmatter":{"title":"【初】SpringBoot使用异步无法获取自定义注解","shortTitle":"【初】异步无法获取自定义注解","index":true,"date":"2022-03-07T17:39:22.000Z","category":["初级"],"description":"一、前言 在SpringBoot项目中，我们要开启异步执行其实很简单，只需要2步 在启用类上加开启异步注解 @EnableAsync 在对应的方法或者类上面加入标示开启异步的注解 @Async 二、问题 但是今天遇到一个问题，由于数据量的递增需把原来的方法改成异步。接到需求的时候眉头紧锁看似在思考如何处理，心里却想这难不倒我，两个注解即可完成。 但在实...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/02SSM/02SpringBoot/SpringBoot%E4%BD%BF%E7%94%A8%E5%BC%82%E6%AD%A5%E6%97%A0%E6%B3%95%E8%8E%B7%E5%8F%96%E8%87%AA%E5%AE%9A%E4%B9%89%E6%B3%A8%E8%A7%A3.html"}],["meta",{"property":"og:site_name","content":"小道仙Java笔记"}],["meta",{"property":"og:title","content":"【初】SpringBoot使用异步无法获取自定义注解"}],["meta",{"property":"og:description","content":"一、前言 在SpringBoot项目中，我们要开启异步执行其实很简单，只需要2步 在启用类上加开启异步注解 @EnableAsync 在对应的方法或者类上面加入标示开启异步的注解 @Async 二、问题 但是今天遇到一个问题，由于数据量的递增需把原来的方法改成异步。接到需求的时候眉头紧锁看似在思考如何处理，心里却想这难不倒我，两个注解即可完成。 但在实..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:author","content":"小道仙97"}],["meta",{"property":"article:published_time","content":"2022-03-07T17:39:22.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"【初】SpringBoot使用异步无法获取自定义注解\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2022-03-07T17:39:22.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"小道仙97\\",\\"url\\":\\"https://java.xdx97.com\\"}]}"]]},"headers":[{"level":2,"title":"一、前言","slug":"一、前言","link":"#一、前言","children":[]},{"level":2,"title":"二、问题","slug":"二、问题","link":"#二、问题","children":[]},{"level":2,"title":"三、@Inherited","slug":"三、-inherited","link":"#三、-inherited","children":[]},{"level":2,"title":"四、@EnableAsync","slug":"四、-enableasync","link":"#四、-enableasync","children":[]},{"level":2,"title":"五、解决","slug":"五、解决","link":"#五、解决","children":[{"level":3,"title":"5-1、在自定义注解上加入注解 @Inherited","slug":"_5-1、在自定义注解上加入注解-inherited","link":"#_5-1、在自定义注解上加入注解-inherited","children":[]},{"level":3,"title":"5-2、开启cglig代理","slug":"_5-2、开启cglig代理","link":"#_5-2、开启cglig代理","children":[]}]}],"git":{"createdTime":null,"updatedTime":null,"contributors":[]},"readingTime":{"minutes":2.3,"words":689},"filePathRelative":"02SSM/02SpringBoot/SpringBoot使用异步无法获取自定义注解.md","localizedDate":"2022年3月8日","excerpt":"<h2>一、前言</h2>\\n<p>在SpringBoot项目中，我们要开启异步执行其实很简单，只需要2步</p>\\n<ol>\\n<li>在启用类上加开启异步注解  <code>@EnableAsync</code></li>\\n<li>在对应的方法或者类上面加入标示开启异步的注解 <code>@Async</code></li>\\n</ol>\\n<br>\\n<h2>二、问题</h2>\\n<p>但是今天遇到一个问题，由于数据量的递增需把原来的方法改成异步。接到需求的时候眉头紧锁看似在思考如何处理，心里却想这难不倒我，两个注解即可完成。</p>\\n<p>但在实际操作中却出了问题，加上注解后启动项目报了空指针异常，经过定位发现错误是因为<strong>无法获取bean上自定义注解</strong>导致的。</p>","autoDesc":true}');export{c as comp,k as data};
