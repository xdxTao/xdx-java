import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,e as t,a as e,w as l,b as n,r as h,o as d,f as r}from"./app-BcAKAKCF.js";const k="/assets/0301_6-CDyiXkKQ.png",p="/assets/0301_7-Ds_MFJce.png",g="/assets/0301_8-DHQxgURa.png",y="/assets/0301_9-DAr9dfmp.png",o="/assets/0301_10-D6auqUHw.png",c="/assets/0301_11-Cp53yxBR.png",B="/assets/0301_12-DgAmAzul.png",f="/assets/0301_13-DT1rj-YX.png",x="/assets/0301_14-BeAkLcFf.png",b="/assets/0301_15-BtqNPLAn.png",E="/assets/0301_16-BNoMijDa.png",A={},D=n('<p><a href="https://d9bp4nr5ye.feishu.cn/wiki/VxhDwPcXYiaciWkBEtvct8qmnic" target="_blank" rel="noopener noreferrer">B站视频地址</a></p><br><p>对数据库的操作有读、写，组合起来就有 读读、读写、写读、写写，读读不存在安全问题，安全问题加锁都可以解决，但所有的操作都加锁太重了，只有写写必须要求加锁，读写、写读可以用MVCC。MySQL的默认隔离级别是RR，但是RR在MVCC的加持下还是存在幻读，这时候就还是需要加锁，间隙锁就是用来在RR级别下解决幻读的问题。</p><br><h1 id="共享锁、排他锁" tabindex="-1"><a class="header-anchor" href="#共享锁、排他锁"><span>共享锁、排他锁</span></a></h1><br><p>共享锁（shared lock ）也叫读锁、S锁，数据被某个事务获取了共享锁之后，还可以被其它事务获取共享锁，但是不能被其它事务获取排他锁。 <br></p><p>排他锁（exclusive Lock）也叫写锁、X锁，数据被某个事务获取之后就不能被其它事务获取任何锁。 <br></p><p>总结：共享锁和共享锁之间不冲突，排他锁和共享锁、排他锁都冲突。默认select的时候是不加锁的，更新、添加、删除的时候会加排他锁。 <br></p><p>强制加共享锁 <code>lock in share mode</code> ，强制加排他锁 <code>for update</code></p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">select</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> from</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> my_table </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> id </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> lock </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">in</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> share mode;</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">select</span><span style="--shiki-light:#D73A49;--shiki-dark:#ABB2BF;"> *</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> from</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> my_table </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">where</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> id </span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> for</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> update</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><br><h1 id="意向锁-意向共享锁、意向排他锁" tabindex="-1"><a class="header-anchor" href="#意向锁-意向共享锁、意向排他锁"><span>意向锁：意向共享锁、意向排他锁</span></a></h1><br><p>加锁的时候可能锁某一行或几行的数据，也可能锁整个表，但上面共享锁只能和共享锁兼容，排他锁和两者都不兼容。虽然锁表的场景很少，如果要用共享锁锁表不得一行行去遍历看看数据有没有被排他锁锁过，如果要用排它锁锁表就得一行行去遍历看是否存在数据被共享锁或排他锁占用。</p><p>实际上是不可能遍历的，代价太大，所以在对某些数据加共享锁的时候，就会给表加上 意向共享锁，对某些数据加排他锁的时候就会对表加上 意向排他锁。</p><p>这样再对表加锁的时候只需要判断是否有对应的意向锁就好了，而不需要遍历。意向锁之间是不冲突的。</p><br><p>共享锁（S）、排他锁（X）、意向共享锁（IS）、意向排他锁（IX）的兼容关系</p><table><thead><tr><th></th><th>X</th><th>IX</th><th>S</th><th>IS</th></tr></thead><tbody><tr><td>X</td><td>❌</td><td>❌</td><td>❌</td><td>❌</td></tr><tr><td>IX</td><td>❌</td><td>✅</td><td>❌</td><td>✅</td></tr><tr><td>S</td><td>❌</td><td>❌</td><td>✅</td><td>✅</td></tr><tr><td>IS</td><td>❌</td><td>✅</td><td>✅</td><td>✅</td></tr></tbody></table><br><h1 id="记录锁、间隙锁、临键锁" tabindex="-1"><a class="header-anchor" href="#记录锁、间隙锁、临键锁"><span>记录锁、间隙锁、临键锁</span></a></h1><br><h2 id="前置" tabindex="-1"><a class="header-anchor" href="#前置"><span>前置</span></a></h2><br><p>上面说了一些锁的概念，现在来尝试一下给数据加锁，在正式开始之前需要了解一下MySQL的数据存储结构：</p><ol><li>在主键索引形成的B+Tree里面，非叶子结点存储的是主键索引，叶子结点存储的是数据</li><li>在非主键索引形成的B+Tree里面，非叶子结点存储的是当前索引，叶子结点存储的是主键索引</li><li>如果没有主键索引，会拿第一个唯一索引来做聚簇索引，如果也没有唯一索引就会创建一个看不见的唯一键。</li><li>所以当通过非主键索引去找数据的时候，其实是先通过非主键索引找到主键索引，再通过主键索引去找数据，这个过程被称为 回表。</li></ol><br><h2 id="锁理论" tabindex="-1"><a class="header-anchor" href="#锁理论"><span>锁理论</span></a></h2><br><p>记录锁（Record Locks）：记录锁是基于索引记录上的锁，它锁定的行数是固定的、明确的，根据情况它可以是共享锁、排他锁。 间隙锁（Gap Locks）：间隙锁的目的是在RR级别下，防止幻读，幻读的产生是当前事务多次的查询结果数量上不一致，间隙锁的目的就是保证当前范围内的数据不会被更改，所以它会锁住某些个区间的数据。 临键锁（Next-key Locks）：<code>等于 记录锁+间隙锁</code>，所以我们只需要知道这两个锁的定义就好了，MySQL默认级别是RR、默认锁上临键锁。</p><br><h2 id="锁总结" tabindex="-1"><a class="header-anchor" href="#锁总结"><span>锁总结</span></a></h2><br><p>锁都是基于索引去找到数据记录再加锁的，而索引的规则是：通过其它索引找到主键索引，所以：</p><ol><li>没有使用索引做更新相关操作会锁表。</li><li>通过唯一/主键索引等值加锁，只会锁具体的行，非唯一索引则不一定，SQL优化器会基于数据分布选择记录锁，或临键锁。</li><li>只有在RR级别下才有间隙锁，目的是为了解决幻读，如果操作的数据是跨多个范围，就会加多个区间的间隙锁。</li><li><strong>MySQL默认的锁就是【临键锁】，所以在执行SQL的时候，记录锁和间隙锁是会同时存在的。范围是左开右闭的区间。</strong></li></ol><p>在SQL查询的时候，我们知道是先通过索引去找数据的，其实加锁也是基于索引的，通过索引找到对应的数据然后把相关的数据行都锁上，如果没有使用索引就会扫描全表，也就会锁表。</p><br><h2 id="锁实践" tabindex="-1"><a class="header-anchor" href="#锁实践"><span>锁实践</span></a></h2><br><p>基于上面的理论和总结，我们用实际的SQL来证明一下，加深印象。</p><br><h3 id="记录锁" tabindex="-1"><a class="header-anchor" href="#记录锁"><span>记录锁</span></a></h3><br><p>创建一个表，并往里面塞一些数据，然后来验证</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">CREATE</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> TABLE</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> `</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">xdx_lock</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">` (</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">  `id`</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> NOT NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> COMMENT </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;主键索引&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">  `conutry`</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> varchar</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">255</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">NOT NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> COMMENT </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;唯一索引&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">  `name`</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> varchar</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">255</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">NOT NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> COMMENT </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;普通索引&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">  `age`</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> NOT NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> COMMENT </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;不是索引&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">  PRIMARY KEY</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">`id`</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">),</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">  UNIQUE</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> KEY</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> `conutry_idx`</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">`conutry`</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">),</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">  KEY</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> `name_idx`</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">`name`</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) ENGINE</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">InnoDB </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">DEFAULT</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> CHARSET</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">utf8mb4 </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">COLLATE</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">utf8mb4_0900_ai_ci COMMENT</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;锁表测试&#39;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h4 id="锁-没有索引" tabindex="-1"><a class="header-anchor" href="#锁-没有索引"><span>锁 没有索引</span></a></h4><br><table><thead><tr><th style="text-align:left;">A事务</th><th style="text-align:left;">B事务</th></tr></thead><tbody><tr><td style="text-align:left;">-- 开启事务 begin;</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">-- 加排他锁（成功）<br> select * from xdx_lock where age = 3 for update;</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">-- 开启事务 begin;</td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">-- 加共享锁（失败）<br> select * from xdx_lock where id = 7 lock in share mode;</td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">-- 加共享锁（失败）<br> select * from xdx_lock where age = 1 lock in share mode;</td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">-- 加共享锁（失败）<br> select * from xdx_lock where conutry = &#39;c&#39; lock in share mode;</td></tr></tbody></table><figure><img src="'+k+'" alt="在这里插入图片描述" tabindex="0" loading="lazy"><figcaption>在这里插入图片描述</figcaption></figure><br><h4 id="锁【普通索引】" tabindex="-1"><a class="header-anchor" href="#锁【普通索引】"><span>锁【普通索引】</span></a></h4><br><table><thead><tr><th style="text-align:left;">A事务</th><th style="text-align:left;">B事务</th></tr></thead><tbody><tr><td style="text-align:left;">-- 开启事务 begin</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">-- 加排他锁（成功）<br> select * from xdx_lock where name = &#39;kklua&#39; for update;</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">-- 开启事务 begin;</td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">-- 加排他锁（成功）<br> select * from xdx_lock where conutry = &#39;c&#39; for update;</td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">-- 加排他锁（成功）<br> select * from xdx_lock where id = 7 for update;</td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">-- 加排他锁（成功）<br> select * from xdx_lock where name = &#39;kkrest&#39; for update;</td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">-- 加排他锁（失败）age没有索引 <br> select * from xdx_lock where age = 1 for update;</td></tr></tbody></table><p><img src="'+p+'" alt="在这里插入图片描述" loading="lazy"><br></p><h4 id="锁-唯一索引" tabindex="-1"><a class="header-anchor" href="#锁-唯一索引"><span>锁 唯一索引</span></a></h4><br><table><thead><tr><th style="text-align:left;">A事务</th><th style="text-align:left;">B事物</th></tr></thead><tbody><tr><td style="text-align:left;">-- 开启事务 begin</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">-- 加排他锁（成功）<br> select * from xdx_lock where conutry = &#39;c&#39; for update;</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">begin;</td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">-- 加排他锁（成功）<br> select * from xdx_lock where id = 5 for update;</td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">-- 加排他锁（成功）<br> select * from xdx_lock where name = &#39;kkgo&#39; for update;</td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">-- 加排他锁（失败）<br> select * from xdx_lock where name = &#39;kktime&#39; for update;</td></tr></tbody></table><figure><img src="'+g+'" alt="在这里插入图片描述" tabindex="0" loading="lazy"><figcaption>在这里插入图片描述</figcaption></figure><br><h4 id="锁-主键索引" tabindex="-1"><a class="header-anchor" href="#锁-主键索引"><span>锁 主键索引</span></a></h4><br><p>和唯一索引一样的效果</p><br><h3 id="间隙锁" tabindex="-1"><a class="header-anchor" href="#间隙锁"><span>间隙锁</span></a></h3><br><p>让我们再来回忆一下，间隙锁的目的是为了防止幻读，所以间隙锁的目的就是阻止一切会让当前事务数据量变化的操作。</p><p>MySQL的数据存储是B+Tree，以主键建立的B+Tree。我们假设表的数据有5条，它们的id分别是 5，10，15，20，25 （这种数据很有可能对吧），虽然它是树结构，但也是排好序的，并且就是以主键为排序的。</p><p>间隙锁的原理就是锁住我们查询数据的各种区间，可能不好理解，先举几个例子：</p><ol><li>where id &gt; 9， 它锁住的区间就是 (5, +∞) ， 开头是5不是9哦，因为9这玩意不存在呀，基于索引加锁，没有索引无法加锁</li><li>where id &gt; 9 and id &lt; 18， 它锁住的区间就是 (5, 10]、(10, 15]、(15, 20]</li><li>where id = 10，它只会锁住 10 这一条数据</li><li>where id = 7，因为7不存在，为了防止后续新增，所以也要锁住最近的一个区间 (5, 10]</li></ol><p><strong>注：间隙锁 是左开右开的区间，但间隙锁和临键锁一起的，而临键锁是左开右闭。</strong></p><br><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">CREATE</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> TABLE</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> `</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">xdx_lock_new</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">` (</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">  `id`</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> INT</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">   NOT NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    COMMENT </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;主键&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> ,</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">  `name`</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> VARCHAR</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">255</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)   </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">NOT NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    COMMENT </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;普通数据&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> ,</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">  PRIMARY KEY</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">  (</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">`id`</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)  </span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">INSERT INTO</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> `xdx_lock_new`</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">`id`</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">`name`</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">VALUES</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;5&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;java&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">INSERT INTO</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> `xdx_lock_new`</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">`id`</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">`name`</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">VALUES</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;10&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;c&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">INSERT INTO</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> `xdx_lock_new`</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">`id`</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">`name`</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">VALUES</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;15&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;go&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">INSERT INTO</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> `xdx_lock_new`</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">`id`</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">`name`</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">VALUES</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;20&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;lua&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">INSERT INTO</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> `xdx_lock_new`</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">`id`</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">`name`</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">VALUES</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;25&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&#39;js&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h4 id="where-id-9" tabindex="-1"><a class="header-anchor" href="#where-id-9"><span>where id &gt; 9</span></a></h4><br><table><thead><tr><th style="text-align:left;">A事务</th><th style="text-align:left;">B事务</th></tr></thead><tbody><tr><td style="text-align:left;">begin;</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">-- 加排他锁（成功）<br> select * from xdx_lock_new where id = 10 for update;</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">begin;</td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">-- 加排他锁（成功）更新的时候自动加锁哈 <br>update xdx_lock_new set name = &#39;xxx&#39; where id = 5;</td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">-- 加排他锁（失败）插入的时候自动加锁哈<br> INSERT INTO xdx_lock_new(id, name) VALUES (&#39;6&#39;, &#39;c++&#39;);</td></tr></tbody></table><figure><img src="'+y+'" alt="在这里插入图片描述" tabindex="0" loading="lazy"><figcaption>在这里插入图片描述</figcaption></figure><br><h4 id="where-id-9-and-id-18" tabindex="-1"><a class="header-anchor" href="#where-id-9-and-id-18"><span>where id &gt; 9 and id &lt; 18</span></a></h4><br><table><thead><tr><th style="text-align:left;">A事务</th><th style="text-align:left;">B事务</th></tr></thead><tbody><tr><td style="text-align:left;">begin;</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">-- 加排他锁（成功）<br> select * from xdx_lock_new where id &gt; 9 and id &lt; 18 for update;</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">begin;</td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">-- 加排他锁（失败）插入的时候自动加锁哈 <br>INSERT INTO xdx_lock_new(id, name) VALUES (&#39;6&#39;, &#39;js&#39;);</td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">-- 加排他锁（失败）插入的时候自动加锁哈 <br>INSERT INTO xdx_lock_new(id, name) VALUES (&#39;11&#39;, &#39;js&#39;);</td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">-- 加排他锁（失败）插入的时候自动加锁哈 <br>INSERT INTO xdx_lock_new(id, name) VALUES (&#39;19&#39;, &#39;js&#39;);</td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">-- 加排他锁（成功）插入的时候自动加锁哈<br> INSERT INTO xdx_lock_new(id, name) VALUES (&#39;21&#39;, &#39;js&#39;);</td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">-- 加排他锁（失败）<br> update xdx_lock_new set name = &#39;xxx&#39; where id = 10;</td></tr></tbody></table><figure><img src="'+o+'" alt="在这里插入图片描述" tabindex="0" loading="lazy"><figcaption>在这里插入图片描述</figcaption></figure><br><h4 id="where-id-10" tabindex="-1"><a class="header-anchor" href="#where-id-10"><span>where id = 10</span></a></h4><br><table><thead><tr><th style="text-align:left;">A事务</th><th style="text-align:left;">B事务</th></tr></thead><tbody><tr><td style="text-align:left;">begin;</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">-- 加排他锁（成功）<br> select * from xdx_lock_new where id = 10 for update;</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">begin;</td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">-- 加排他锁（成功）<br> select * from xdx_lock_new where id = 5 for update;</td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">-- 插入数据（成功）<br> INSERT INTO xdx_lock_new(id, name) VALUES (&#39;9&#39;, &#39;c++&#39;);</td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">-- 插入数据（成功）<br> INSERT INTO xdx_lock_new(id, name) VALUES (&#39;11&#39;, &#39;rust&#39;);</td></tr></tbody></table><figure><img src="'+c+'" alt="在这里插入图片描述" tabindex="0" loading="lazy"><figcaption>在这里插入图片描述</figcaption></figure><br><h4 id="where-id-7" tabindex="-1"><a class="header-anchor" href="#where-id-7"><span>where id = 7</span></a></h4><br><table><thead><tr><th style="text-align:left;">A事务</th><th style="text-align:left;">B事务</th></tr></thead><tbody><tr><td style="text-align:left;">begin;</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;">-- 加排他锁（成功）<br> select * from xdx_lock_new where id = 7 for update;</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">begin;</td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">-- 加排他锁（失败）插入的时候自动加锁哈<br> INSERT INTO xdx_lock_new(id, name) VALUES (&#39;6&#39;, &#39;js&#39;);</td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">-- 加排他锁（成功）<br> update xdx_lock_new set name = &#39;xxx&#39; where id = 5;</td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">-- 加排他锁（成功）<br> update xdx_lock_new set name = &#39;xxx&#39; where id = 10;</td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">-- 加排他锁（失败）插入的时候自动加锁哈<br> INSERT INTO xdx_lock_new(id, name) VALUES (&#39;7&#39;, &#39;js&#39;);</td></tr></tbody></table><figure><img src="'+B+'" alt="在这里插入图片描述" tabindex="0" loading="lazy"><figcaption>在这里插入图片描述</figcaption></figure><br><h4 id="锁非唯一索引" tabindex="-1"><a class="header-anchor" href="#锁非唯一索引"><span>锁非唯一索引</span></a></h4><br><p>基于唯一索引或主键索引，间隙锁的范围很好理解，但是基于非唯一索引进行数据锁定的时候，SQL优化器最终执行的结果可能和我们想象的并不一样。比如下面这个案例，相同的SQL，但是表数据不一样的时候，直接结果也不一样。</p><div class="language-sql line-numbers-mode" data-highlighter="shiki" data-ext="sql" data-title="sql" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">CREATE</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> TABLE</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> `</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">xdx_lock_normal_primary</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">` (</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">  `id`</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">11</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">NOT NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">  `name`</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> varchar</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">255</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">NOT NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">  `age`</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> int</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">11</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">NOT NULL</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">  PRIMARY KEY</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">`id`</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">),</span></span>\n<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">  KEY</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> `name`</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">`name`</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span></span>\n<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) ENGINE</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">InnoDB </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">DEFAULT</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> CHARSET</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">utf8mb4</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><p><strong>结果一</strong></p><figure><img src="'+f+'" alt="在这里插入图片描述" tabindex="0" loading="lazy"><figcaption>在这里插入图片描述</figcaption></figure><br><p><strong>结果二</strong></p><figure><img src="'+x+'" alt="在这里插入图片描述" tabindex="0" loading="lazy"><figcaption>在这里插入图片描述</figcaption></figure><br><p><strong>总结</strong></p><br><p>来看一下GPT的回答，我觉得应当是如此的，简单来说就是查询优化器觉得不需要间隙锁了，直接转成具体的记录锁。</p><figure><img src="'+b+'" alt="在这里插入图片描述" tabindex="0" loading="lazy"><figcaption>在这里插入图片描述</figcaption></figure><br><p><strong>注：在第一种情况下，的确是因为加了间隙锁导致的，因为间隙锁的目的是防止幻读，是在RR级别下的，当我把全局事务改成RC的时候，第一种数据集也不会锁 3、4 两行数据。</strong></p><br><br><p>但其实这也不是必然的，在MySQL5.8和5.7里面的结果是不一样的</p><figure><img src="'+E+'" alt="在这里插入图片描述" tabindex="0" loading="lazy"><figcaption>在这里插入图片描述</figcaption></figure><br><h3 id="临键锁" tabindex="-1"><a class="header-anchor" href="#临键锁"><span>临键锁</span></a></h3><br><p>MySQL默认的锁就是临键锁，当写一个SQL的时候就有可能触发临键锁，但临键锁并不是一个单独的锁，临键锁 = 记录锁 + 间隙锁，所以分析的时候我们可以单独的判断它当前加了那种记录锁，然后再单独看它是否被加了间隙锁，再结合起来判断。</p><br><h1 id="表锁、页面锁、行锁" tabindex="-1"><a class="header-anchor" href="#表锁、页面锁、行锁"><span>表锁、页面锁、行锁</span></a></h1><p>在学习MySQL锁的时候这些锁给我带来了很大的困扰，其实它们只是表示我们当前这次操作锁了多少数据而已，比是一行数据还是整个表的数据。</p><p>MySQL官方文档里面并未对这几个锁做出解释。</p><br><h1 id="死锁" tabindex="-1"><a class="header-anchor" href="#死锁"><span>死锁</span></a></h1><br><p>死锁其上并不属于MySQL锁的范围，它只是基于锁而产生的一种现象。</p><table><thead><tr><th style="text-align:left;">A事务</th><th style="text-align:left;">B事务</th></tr></thead><tbody><tr><td style="text-align:left;">获取 one表的某些行数据的排他锁</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">获取 two表的某些行数据的排他锁</td></tr><tr><td style="text-align:left;">尝试获取 two表的某些行数据的锁（被B事务锁住了获取不到等待）</td><td style="text-align:left;"></td></tr><tr><td style="text-align:left;"></td><td style="text-align:left;">尝试获取 one表的某些行数据的锁（被A事务锁住了获取不到等待）</td></tr><tr><td style="text-align:left;">互相等待对方的锁，死锁了</td><td style="text-align:left;"></td></tr></tbody></table><br>',130),m=t("p",null,[t("br"),t("br")],-1),C=t("p",null,"参考文章",-1),_=t("p",null,"https://dev.mysql.com/doc/refman/8.0/en/innodb-locking.html#innodb-gap-locks https://blog.unclezs.com/pages/f14d52/#gap-lock https://blog.csdn.net/qq_20597727/article/details/87308709 https://www.cnblogs.com/LoveShare/p/17023767.html https://juejin.cn/post/7172561613080231967?from=search-suggest https://juejin.cn/post/6931752749545553933",-1);function F(u,v){const i=h("RouteLink");return d(),a("div",null,[D,t("p",null,[e(i,{to:"/03%E6%95%B0%E6%8D%AE%E5%BA%93/01MySQL/Deadlock%20found%20when%20trying%20to%20get%20lock%EF%BC%9B%20try%20restarting%20transaction%20%E3%80%90MySQL%E6%AD%BB%E9%94%81%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3%E3%80%91.html"},{default:l(()=>[r("MySQL死锁问题解决")]),_:1})]),m,C,_])}const S=s(A,[["render",F],["__file","一文弄懂MySQL锁机制【记录锁、间隙锁、临键锁，共享锁、排他锁，意向锁】.html.vue"]]),T=JSON.parse('{"path":"/03%E6%95%B0%E6%8D%AE%E5%BA%93/01MySQL/%E4%B8%80%E6%96%87%E5%BC%84%E6%87%82MySQL%E9%94%81%E6%9C%BA%E5%88%B6%E3%80%90%E8%AE%B0%E5%BD%95%E9%94%81%E3%80%81%E9%97%B4%E9%9A%99%E9%94%81%E3%80%81%E4%B8%B4%E9%94%AE%E9%94%81%EF%BC%8C%E5%85%B1%E4%BA%AB%E9%94%81%E3%80%81%E6%8E%92%E4%BB%96%E9%94%81%EF%BC%8C%E6%84%8F%E5%90%91%E9%94%81%E3%80%91.html","title":"【中】一文弄懂MySQL锁机制【记录锁、间隙锁、临键锁，共享锁、排他锁，意向锁】","lang":"zh-CN","frontmatter":{"title":"【中】一文弄懂MySQL锁机制【记录锁、间隙锁、临键锁，共享锁、排他锁，意向锁】","shortTitle":"【中】 一文弄懂MySQL锁机制","date":"2023-11-10T23:17:10.000Z","category":["中级"],"description":"B站视频地址 对数据库的操作有读、写，组合起来就有 读读、读写、写读、写写，读读不存在安全问题，安全问题加锁都可以解决，但所有的操作都加锁太重了，只有写写必须要求加锁，读写、写读可以用MVCC。MySQL的默认隔离级别是RR，但是RR在MVCC的加持下还是存在幻读，这时候就还是需要加锁，间隙锁就是用来在RR级别下解决幻读的问题。 共享锁、排他锁 共享锁...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/03%E6%95%B0%E6%8D%AE%E5%BA%93/01MySQL/%E4%B8%80%E6%96%87%E5%BC%84%E6%87%82MySQL%E9%94%81%E6%9C%BA%E5%88%B6%E3%80%90%E8%AE%B0%E5%BD%95%E9%94%81%E3%80%81%E9%97%B4%E9%9A%99%E9%94%81%E3%80%81%E4%B8%B4%E9%94%AE%E9%94%81%EF%BC%8C%E5%85%B1%E4%BA%AB%E9%94%81%E3%80%81%E6%8E%92%E4%BB%96%E9%94%81%EF%BC%8C%E6%84%8F%E5%90%91%E9%94%81%E3%80%91.html"}],["meta",{"property":"og:site_name","content":"小道仙Java笔记"}],["meta",{"property":"og:title","content":"【中】一文弄懂MySQL锁机制【记录锁、间隙锁、临键锁，共享锁、排他锁，意向锁】"}],["meta",{"property":"og:description","content":"B站视频地址 对数据库的操作有读、写，组合起来就有 读读、读写、写读、写写，读读不存在安全问题，安全问题加锁都可以解决，但所有的操作都加锁太重了，只有写写必须要求加锁，读写、写读可以用MVCC。MySQL的默认隔离级别是RR，但是RR在MVCC的加持下还是存在幻读，这时候就还是需要加锁，间隙锁就是用来在RR级别下解决幻读的问题。 共享锁、排他锁 共享锁..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-28T04:02:10.000Z"}],["meta",{"property":"article:author","content":"小道仙97"}],["meta",{"property":"article:published_time","content":"2023-11-10T23:17:10.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-28T04:02:10.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"【中】一文弄懂MySQL锁机制【记录锁、间隙锁、临键锁，共享锁、排他锁，意向锁】\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-11-10T23:17:10.000Z\\",\\"dateModified\\":\\"2024-07-28T04:02:10.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"小道仙97\\",\\"url\\":\\"https://java.xdx97.com\\"}]}"]]},"headers":[{"level":2,"title":"前置","slug":"前置","link":"#前置","children":[]},{"level":2,"title":"锁理论","slug":"锁理论","link":"#锁理论","children":[]},{"level":2,"title":"锁总结","slug":"锁总结","link":"#锁总结","children":[]},{"level":2,"title":"锁实践","slug":"锁实践","link":"#锁实践","children":[{"level":3,"title":"记录锁","slug":"记录锁","link":"#记录锁","children":[]},{"level":3,"title":"间隙锁","slug":"间隙锁","link":"#间隙锁","children":[]},{"level":3,"title":"临键锁","slug":"临键锁","link":"#临键锁","children":[]}]}],"git":{"createdTime":1721461625000,"updatedTime":1722139330000,"contributors":[{"name":"ziyangtao","email":"ziyangtao@distinctclinic.com","commits":7}]},"readingTime":{"minutes":10.99,"words":3296},"filePathRelative":"03数据库/01MySQL/一文弄懂MySQL锁机制【记录锁、间隙锁、临键锁，共享锁、排他锁，意向锁】.md","localizedDate":"2023年11月11日","excerpt":"<p><a href=\\"https://d9bp4nr5ye.feishu.cn/wiki/VxhDwPcXYiaciWkBEtvct8qmnic\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">B站视频地址</a></p>\\n<br>\\n<p>对数据库的操作有读、写，组合起来就有 读读、读写、写读、写写，读读不存在安全问题，安全问题加锁都可以解决，但所有的操作都加锁太重了，只有写写必须要求加锁，读写、写读可以用MVCC。MySQL的默认隔离级别是RR，但是RR在MVCC的加持下还是存在幻读，这时候就还是需要加锁，间隙锁就是用来在RR级别下解决幻读的问题。</p>","autoDesc":true}');export{S as comp,T as data};
