import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as h,f as s,e as i,a as t,w as n,d as l,r as k,o as p}from"./app-CPTE7G04.js";const r={},d=s("p",null,[i("B站视频："),s("a",{href:"https://www.bilibili.com/video/BV1eV411u7cg",target:"_blank",rel:"noopener noreferrer"},"https://www.bilibili.com/video/BV1eV411u7cg")],-1),g=s("p",null,[i("技术文档："),s("a",{href:"https://d9bp4nr5ye.feishu.cn/wiki/HX50wdHFyiFoLrkfEAAcTBdinvh",target:"_blank",rel:"noopener noreferrer"},"https://d9bp4nr5ye.feishu.cn/wiki/HX50wdHFyiFoLrkfEAAcTBdinvh")],-1),c=s("br",null,null,-1),y=s("h2",{id:"一、什么是事物",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#一、什么是事物"},[s("span",null,"一、什么是事物")])],-1),o=s("br",null,null,-1),E=l(`<ul><li>A：原子性：事物是一个原子操作单元，要么完全执行，要么完全不执行。事物中的所有操作要么全部成功，要么全部失败，没有中间状态。</li><li>C：一致性：事物在执行前和执行后都必须保持数据库的一致性状态。</li><li>I：隔离性：事物的隔离性确保并发执行的事物彼此不会相互干扰。</li><li>D：一致性：一旦事物提交，其结果应该是永久性的，即使在系统故障的情况下也是如此。</li></ul><br><h2 id="二、什么是声明事物-什么是编程事物" tabindex="-1"><a class="header-anchor" href="#二、什么是声明事物-什么是编程事物"><span>二、什么是声明事物，什么是编程事物</span></a></h2><h3 id="声明事物" tabindex="-1"><a class="header-anchor" href="#声明事物"><span>声明事物</span></a></h3><p>声明式事物是通过配置的方式来管理事物的行为，声明式事物的好处是可以将事物管理与业务逻辑相分离，提高了代码的可读性和维护性。</p><br><h3 id="编程事物" tabindex="-1"><a class="header-anchor" href="#编程事物"><span>编程事物</span></a></h3><p>编程式事物是通过编写代码显式地管理事物的开始、提交和回滚。使用编程式事物可以更加灵活地控制事物的细节，但需要更多的代码来处理事物管理，可能导致代码的冗余和增加了复杂性。</p><br><h2 id="三、spring-如何实现声明事物和编程事物的" tabindex="-1"><a class="header-anchor" href="#三、spring-如何实现声明事物和编程事物的"><span>三、Spring 如何实现声明事物和编程事物的</span></a></h2><h3 id="声明事物-1" tabindex="-1"><a class="header-anchor" href="#声明事物-1"><span>声明事物</span></a></h3><p>声明事物的代码很简单，我们也是经常使用的。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> org.springframework.stereotype.Service</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> org.springframework.transaction.annotation.Transactional</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;">Service</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> UserService</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;">Transactional</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> performTransaction</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">        // 事物逻辑</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h3 id="编程事物-1" tabindex="-1"><a class="header-anchor" href="#编程事物-1"><span>编程事物</span></a></h3><p>编程事物，需要自己来控制事物的流程，更加灵活但也更加复杂，一般不建议使用。（实际上我也没在生产环境中用过）</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> org.springframework.beans.factory.annotation.Autowired</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> org.springframework.stereotype.Service</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> org.springframework.transaction.TransactionStatus</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> org.springframework.transaction.support.TransactionCallbackWithoutResult</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> org.springframework.transaction.support.TransactionTemplate</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;">Service</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> class</span><span style="--shiki-light:#6F42C1;--shiki-dark:#E5C07B;"> TransactionService</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    private</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> final</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> TransactionTemplate</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> transactionTemplate</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;">Autowired</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> TransactionService</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">TransactionTemplate</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> transactionTemplate</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#E5C07B;">        this</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">transactionTemplate</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> transactionTemplate;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    public</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> performTransaction</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">        transactionTemplate</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">execute</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> TransactionCallbackWithoutResult</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">() {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">            protected</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> doInTransactionWithoutResult</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">TransactionStatus</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> status</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">                try</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">                    // 事物逻辑</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">                } </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">Exception</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> e</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">                    status</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">setRollbackOnly</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">                    throw</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> e;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">                }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">            }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">        });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h2 id="四、声明事物是怎么实现的" tabindex="-1"><a class="header-anchor" href="#四、声明事物是怎么实现的"><span>四、声明事物是怎么实现的</span></a></h2><br><p>虽然我们实现事物的方式有声明式和编程式，但在实际的使用中，我们只会用声明式，所以我们有必要来深入理解一下声明事物。</p><p>其实简单来说在Spring中，我们开启声明事物用的是<code>@Transactional</code> ，本质上是使用的 代理和AOP来实现。</p><ol><li>事物拦截器链（Interceptor Chain）：Spring的声明式事物依赖于AOP技术，在运行时动态生成代理对象并创建事物拦截器链。在方法调用链中，每个事物拦截器都会被依次调用，并根据事物属性的定义决定是否开启、提交或回滚事物。</li><li>事物切点（Transaction Pointcut）：事物切点定义了哪些方法需要被事物拦截器拦截并应用事物逻辑。切点通过表达式语言（如Spring表达式语言）或基于注解的方式来指定匹配的方法。Spring提供了灵活的切点表达式来满足各种粒度的事物控制需求。</li><li>事物属性解析：在声明式事物中，事物属性可以通过注解（如@Transactional）或配置文件来指定。事物属性包括隔离级别、传播行为、超时设置等。Spring会解析事物属性，并将其应用于方法上，以确定事物的行为。事物属性解析器根据事物定义的优先级，从全局配置或方法级别的注解中获取事物属性。</li><li>事物管理器（Transaction Manager）：事物管理器是Spring框架的核心组件之一。它负责处理实际的事物管理操作，与底层的数据访问技术（如JDBC、Hibernate等）进行交互。事物管理器负责事物的创建、提交和回滚，并与当前线程进行绑定。Spring提供了多种事物管理器的实现，如<code>DataSourceTransactionManager</code>、<code>JpaTransactionManager</code>等，可以根据具体的数据访问技术进行配置。</li><li>事物同步器（Transaction Synchronization）：事物同步器用于在事物的不同阶段注册回调方法。在事物提交或回滚时，事物同步器会触发注册的回调方法，以执行一些额外的操作。例如，清理数据库连接、提交缓存数据等。Spring利用事物同步器来确保与事物相关的资源的正确管理和释放。</li><li>事物切面（Transaction Aspect）：事物切面是由事物拦截器和事物切点组成的，它定义了在目标方法执行前后应用事物逻辑的规则。事物切面通过AOP技术将事物管理逻辑与业务逻辑进行解耦。当目标方法被调用时，事物切面会根据事物属性的定义，决定是否开启、提交。</li></ol><br><h2 id="五、-transactional-注解的参数" tabindex="-1"><a class="header-anchor" href="#五、-transactional-注解的参数"><span>五、@Transactional 注解的参数</span></a></h2><br><p>在声明事物中，我们只需要和注解 @Transactional 打交道，所以我们有必要来深入理解一下这个注解中的参数配置。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;"> @</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">interface</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;"> Transactional</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;">AliasFor</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;transactionManager&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">    String</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> value</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">default</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    // 事物管理器、暂时先忽略它，我们也不会去修改这个参数的值</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    @</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;">AliasFor</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;value&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">    String</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> transactionManager</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">default</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;">    String</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">[] </span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">label</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">default</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> {}</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    // 事物传播行为</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">    Propagation</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> propagation</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">default</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> Propagation</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">REQUIRED</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    // 事物隔离级别</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">    Isolation</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> isolation</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">default</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> Isolation</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">DEFAULT</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    // 事物超时时间 -1，为永久不超时， 单位是秒</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> timeout</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">default</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> -</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    // 事物超时时间，可以设置单位，比如 timeoutString = &quot;30s&quot;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">    String</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> timeoutString</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">default</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    // 是否只读事物</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    boolean</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> readOnly</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">default</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> false</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    // 对哪些异常进行回滚</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">    Class</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> extends Throwable</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">[] </span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">rollbackFor</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">default</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> {}</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    // 对哪些异常进行回滚【异常全限定名】</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;">    String</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">[] </span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">rollbackForClassName</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">default</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> {}</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    // 对哪些异常不回滚</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">    Class</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">?</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> extends Throwable</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">[] </span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">noRollbackFor</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">default</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> {}</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">    </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    // 对哪些异常不回滚【异常全限定名】</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;">    String</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">[] </span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">noRollbackForClassName</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">() </span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">default</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> {}</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><p>rollbackFor和rollbackForClassName的区别，直接来看使用方式。 最好使用rollbackFor 可以在编译的时候就帮我买检查是不是对的。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;">Transactional</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">rollbackFor</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> Exception</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> rollbackForClassName</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> {</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;java.lang.Exception&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">})</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><br><p>@Transactional 注解的参数虽然多，但绝大部分都很好理解。这里主要是来说两个重要且不好理解的参数<code>propagation</code> 和 <code>isolation</code></p><br><h3 id="propagation-事物传播行为" tabindex="-1"><a class="header-anchor" href="#propagation-事物传播行为"><span>propagation (事物传播行为)</span></a></h3><br>`,36),B=l('<table><thead><tr><th style="text-align:left;">值（小写方便阅读）</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;">REQUIRED（required）<br> 默认值</td><td style="text-align:left;">1.如果当前没有事物，则创建一个新的事物，并将当前方法作为事物的起点。<br> 2.如果当前已经存在事物，则加入到当前事物中，成为当前事物的一部分。<br> 3.当前事物的提交和回滚都将影响到该方法。</td></tr><tr><td style="text-align:left;">REQUIRES_NEW (requires_new)</td><td style="text-align:left;">1.无论当前是否存在事物，都创建一个新的事物。<br> 2.如果当前存在事物，则将当前事物挂起，并启动一个新的事物。<br> 3. 当前方法独立于外部事物运行，它有自己的事物边界。</td></tr><tr><td style="text-align:left;">SUPPORTS（supports）</td><td style="text-align:left;">1. 如果当前存在事物，则加入到当前事物中，成为当前事物的一部分。<br> 2.如果当前没有事物，则以非事物方式执行。<br> 3.支持当前事物的执行，但不强制要求存在事物。</td></tr><tr><td style="text-align:left;">NOT_SUPPORTED (not_supported)</td><td style="text-align:left;">1.以非事物方式执行操作。<br> 2.如果当前存在事物，则将其挂起。<br>3.该方法在一个没有事物的环境中执行。</td></tr><tr><td style="text-align:left;">NEVER（never）</td><td style="text-align:left;">1.以非事物方式执行操作。<br> 2.如果当前存在事物，则抛出异常，表示不允许在事物中执行该方法。</td></tr><tr><td style="text-align:left;">MANDATORY（mandatory）</td><td style="text-align:left;">1.要求当前存在事物，否则抛出异常。<br> 2.该方法必须在一个已经存在的事物中被调用。</td></tr><tr><td style="text-align:left;">NESTED (nested)</td><td style="text-align:left;">1.如果当前存在事物，则在嵌套事物中执行。<br> 2.如果当前没有事物，则行为类似于 REQUIRED，创建一个新的事物。</td></tr></tbody></table><br><p>存在事物的时候REQUIRED和NESTED的区别：REQUIRED 是加入当前事物，成为当前事物的一部分，NESTED 是生成嵌套事物，本质上是两个事物。（具体区别下面实践演示）</p><br><h3 id="isolation-事物隔离级别" tabindex="-1"><a class="header-anchor" href="#isolation-事物隔离级别"><span>isolation（事物隔离级别）</span></a></h3><p>其实就是我们之前学习数据库时候的数据库隔离级别了。</p><table><thead><tr><th style="text-align:left;">值（小写方便阅读）</th><th style="text-align:left;">描述</th></tr></thead><tbody><tr><td style="text-align:left;">DEFAULT （default）</td><td style="text-align:left;">默认的，看当前数据库默认的隔离级别是什么。</td></tr><tr><td style="text-align:left;">READ_UNCOMMITTED （read_uncommitted）</td><td style="text-align:left;">读未提交</td></tr><tr><td style="text-align:left;">READ_COMMITTED (read_committed)</td><td style="text-align:left;">读已提交</td></tr><tr><td style="text-align:left;">REPEATABLE_READ (repeatable_read)</td><td style="text-align:left;">可重复读</td></tr><tr><td style="text-align:left;">SERIALIZABLE (serializable)</td><td style="text-align:left;">序列化</td></tr></tbody></table><br><h2 id="六、-transactional-实践" tabindex="-1"><a class="header-anchor" href="#六、-transactional-实践"><span>六、@Transactional 实践</span></a></h2>',9),v=l(`<br><h3 id="理论" tabindex="-1"><a class="header-anchor" href="#理论"><span>理论</span></a></h3><br><p>在深入理解事物的传播行为之前，我们需要理解三个基本的概念，理解了它们我们就理解了事物传播行为。它们分别是：嵌套事物、新事物、当前事物。</p><p>为了理解方便，这里我们先约定一下，有两个事物方法A和B，在A里面调用B。且A事物的定义如下不会改变，B事物的传播行为可能会变。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;">Transactional</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">rollbackFor</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> Exception</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> A</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">    userMapper</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">insertUser</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;A&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">    sqlTestService</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">B</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> B</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">    userMapper</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">insertUser</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;B&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">2</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h4 id="嵌套事物" tabindex="-1"><a class="header-anchor" href="#嵌套事物"><span>嵌套事物</span></a></h4><p>修改B事物的传播行为，让它生成嵌套事物</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;">Transactional</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">rollbackFor</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> Exception</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> propagation</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> Propagation</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">NESTED</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>嵌套事物和父事物是有关联的，当A事物回滚的时候，B事物一定回滚。</p><p>当B事物异常回滚的时候，要判断在A里面是否try了B事物，如果try就A不会回滚，只是B回滚。</p><br><h4 id="新事物" tabindex="-1"><a class="header-anchor" href="#新事物"><span>新事物</span></a></h4><p>修改B事物的传播行为，让它生成新事物</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;">Transactional</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">rollbackFor</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> Exception</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> propagation</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> Propagation</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">REQUIRES_NEW</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>既然都说了是新事物，那A、B事物没有什么必然的关系了。</p><br><h4 id="当前事物" tabindex="-1"><a class="header-anchor" href="#当前事物"><span>当前事物</span></a></h4><p>修改B事物的传播行为，让它加入当前事物</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;">Transactional</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">rollbackFor</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> Exception</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> propagation</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> Propagation</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">REQUIRED</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;">Transactional</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">rollbackFor</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> Exception</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">class</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> propagation</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> Propagation</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">SUPPORTS</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,21),A=l(`<br><h3 id="实践" tabindex="-1"><a class="header-anchor" href="#实践"><span>实践</span></a></h3><p>insertUser 方法就是一个简单的插入语句，为了避免误会，这里直接给出来。</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;">Insert</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;INSERT INTO t_users (\`name\`, \`age\`) VALUES (#{name}, #{age})&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> insertUser</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;">Param</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;name&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">) </span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> name</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,@</span><span style="--shiki-light:#D73A49;--shiki-dark:#E5C07B;">Param</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;age&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">) </span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">Integer</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> age)</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><br><p>异常的话，是直接手动抛出一个异常</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">throw</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> RuntimeException</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;xxxxx&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">)</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><br><p>B方法是否try：是指在A方法调用B方法的时候，是否使用了try catch 如下：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;"> void</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> A</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">() {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">    userMapper</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">insertUser</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;">&quot;A&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    try</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">        sqlTestService</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">B</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">    }</span><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">catch</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">Exception</span><span style="--shiki-light:#E36209;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> e</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">        e</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">printStackTrace</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><p>代码很简单，来回变换很多，就不展示了，直接给执行结果：</p><table><thead><tr><th style="text-align:left;">B事物类型</th><th style="text-align:left;">异常方法</th><th style="text-align:left;">B方法是否try</th><th style="text-align:left;">插入数据结果</th></tr></thead><tbody><tr><td style="text-align:left;">新事物</td><td style="text-align:left;">A方法</td><td style="text-align:left;">否</td><td style="text-align:left;">B</td></tr><tr><td style="text-align:left;">新事物</td><td style="text-align:left;">A方法</td><td style="text-align:left;">是</td><td style="text-align:left;">B</td></tr><tr><td style="text-align:left;">新事物</td><td style="text-align:left;">B方法</td><td style="text-align:left;">否</td><td style="text-align:left;">空</td></tr><tr><td style="text-align:left;">新事物</td><td style="text-align:left;">B方法</td><td style="text-align:left;">是</td><td style="text-align:left;">A</td></tr><tr><td style="text-align:left;">嵌套事物</td><td style="text-align:left;">A方法</td><td style="text-align:left;">否</td><td style="text-align:left;">空</td></tr><tr><td style="text-align:left;">嵌套事物</td><td style="text-align:left;">A方法</td><td style="text-align:left;">是</td><td style="text-align:left;">空</td></tr><tr><td style="text-align:left;">嵌套事物</td><td style="text-align:left;">B方法</td><td style="text-align:left;">否</td><td style="text-align:left;">空</td></tr><tr><td style="text-align:left;">嵌套事物</td><td style="text-align:left;">B方法</td><td style="text-align:left;">是</td><td style="text-align:left;">A</td></tr><tr><td style="text-align:left;">加入当前事物</td><td style="text-align:left;">A方法</td><td style="text-align:left;">否</td><td style="text-align:left;">空</td></tr><tr><td style="text-align:left;">加入当前事物</td><td style="text-align:left;">A方法</td><td style="text-align:left;">是</td><td style="text-align:left;">空</td></tr><tr><td style="text-align:left;">加入当前事物</td><td style="text-align:left;">B方法</td><td style="text-align:left;">否</td><td style="text-align:left;">空</td></tr><tr><td style="text-align:left;">加入当前事物</td><td style="text-align:left;">B方法</td><td style="text-align:left;">是</td><td style="text-align:left;">空</td></tr></tbody></table>`,13);function b(C,u){const a=k("font");return p(),h("div",null,[d,g,c,y,o,s("p",null,[i("简单来说事物就是一组对数据库的操作"),t(a,{color:"red"},{default:n(()=>[i("要么都成功，要么都失败。")]),_:1}),i("事物要保证可靠性，必须具备四个特性：ACID。")]),E,s("p",null,[i("事物的传播行为是指："),t(a,{color:"red"},{default:n(()=>[i("当前事物方法被调用的时候，需要做什么样的操作")]),_:1}),i("。它的配置如下：")]),B,s("p",null,[i("在使用 @Transactiona 注解的时候，一定要设置rollbackFor的值，默认情况下是"),t(a,{color:"red"},{default:n(()=>[i("不回滚的检查类异常")]),_:1}),i("，比如 IOException、SQLException 等。")]),v,s("p",null,[i("既然说是加入当前事物，那其实本质上还是一个事物，不管怎么样的异常，也不管如何处理异常，"),t(a,{color:"red"},{default:n(()=>[i("A、B方法都是一起提交、或一起回滚。")]),_:1})]),A])}const D=e(r,[["render",b],["__file","Spring使用@Transactional 管理事务，Java事务详解.html.vue"]]),f=JSON.parse('{"path":"/02SSM/01Spring/Spring%E4%BD%BF%E7%94%A8@Transactional%20%E7%AE%A1%E7%90%86%E4%BA%8B%E5%8A%A1%EF%BC%8CJava%E4%BA%8B%E5%8A%A1%E8%AF%A6%E8%A7%A3.html","title":"【中】Spring使用@Transactional 管理事物，Java事物详解","lang":"zh-CN","frontmatter":{"title":"【中】Spring使用@Transactional 管理事物，Java事物详解","shortTitle":"【中】@Transactional 管理事物，Java事物详解","date":"2023-06-24T22:04:42.000Z","category":["中级","视频讲解"],"tag":["Spring","事物","事物管理","Transactional"],"description":"B站视频：https://www.bilibili.com/video/BV1eV411u7cg 技术文档：https://d9bp4nr5ye.feishu.cn/wiki/HX50wdHFyiFoLrkfEAAcTBdinvh 一、什么是事物 简单来说事物就是一组对数据库的操作事物要保证可靠性，必须具备四个特性：ACID。 A：原子性：事物是一个原...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/02SSM/01Spring/Spring%E4%BD%BF%E7%94%A8@Transactional%20%E7%AE%A1%E7%90%86%E4%BA%8B%E5%8A%A1%EF%BC%8CJava%E4%BA%8B%E5%8A%A1%E8%AF%A6%E8%A7%A3.html"}],["meta",{"property":"og:site_name","content":"小道仙Java笔记"}],["meta",{"property":"og:title","content":"【中】Spring使用@Transactional 管理事物，Java事物详解"}],["meta",{"property":"og:description","content":"B站视频：https://www.bilibili.com/video/BV1eV411u7cg 技术文档：https://d9bp4nr5ye.feishu.cn/wiki/HX50wdHFyiFoLrkfEAAcTBdinvh 一、什么是事物 简单来说事物就是一组对数据库的操作事物要保证可靠性，必须具备四个特性：ACID。 A：原子性：事物是一个原..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-20T12:30:55.000Z"}],["meta",{"property":"article:author","content":"小道仙97"}],["meta",{"property":"article:tag","content":"Spring"}],["meta",{"property":"article:tag","content":"事物"}],["meta",{"property":"article:tag","content":"事物管理"}],["meta",{"property":"article:tag","content":"Transactional"}],["meta",{"property":"article:published_time","content":"2023-06-24T22:04:42.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-20T12:30:55.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"【中】Spring使用@Transactional 管理事物，Java事物详解\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2023-06-24T22:04:42.000Z\\",\\"dateModified\\":\\"2024-07-20T12:30:55.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"小道仙97\\",\\"url\\":\\"https://java.xdx97.com\\"}]}"]]},"headers":[{"level":2,"title":"一、什么是事物","slug":"一、什么是事物","link":"#一、什么是事物","children":[]},{"level":2,"title":"二、什么是声明事物，什么是编程事物","slug":"二、什么是声明事物-什么是编程事物","link":"#二、什么是声明事物-什么是编程事物","children":[{"level":3,"title":"声明事物","slug":"声明事物","link":"#声明事物","children":[]},{"level":3,"title":"编程事物","slug":"编程事物","link":"#编程事物","children":[]}]},{"level":2,"title":"三、Spring 如何实现声明事物和编程事物的","slug":"三、spring-如何实现声明事物和编程事物的","link":"#三、spring-如何实现声明事物和编程事物的","children":[{"level":3,"title":"声明事物","slug":"声明事物-1","link":"#声明事物-1","children":[]},{"level":3,"title":"编程事物","slug":"编程事物-1","link":"#编程事物-1","children":[]}]},{"level":2,"title":"四、声明事物是怎么实现的","slug":"四、声明事物是怎么实现的","link":"#四、声明事物是怎么实现的","children":[]},{"level":2,"title":"五、@Transactional 注解的参数","slug":"五、-transactional-注解的参数","link":"#五、-transactional-注解的参数","children":[{"level":3,"title":"propagation (事物传播行为)","slug":"propagation-事物传播行为","link":"#propagation-事物传播行为","children":[]},{"level":3,"title":"isolation（事物隔离级别）","slug":"isolation-事物隔离级别","link":"#isolation-事物隔离级别","children":[]}]},{"level":2,"title":"六、@Transactional 实践","slug":"六、-transactional-实践","link":"#六、-transactional-实践","children":[{"level":3,"title":"理论","slug":"理论","link":"#理论","children":[]},{"level":3,"title":"实践","slug":"实践","link":"#实践","children":[]}]}],"git":{"createdTime":1721461625000,"updatedTime":1721478655000,"contributors":[{"name":"ziyangtao","email":"ziyangtao@distinctclinic.com","commits":6}]},"readingTime":{"minutes":9.78,"words":2934},"filePathRelative":"02SSM/01Spring/Spring使用@Transactional 管理事务，Java事务详解.md","localizedDate":"2023年6月25日","excerpt":"<p>B站视频：<a href=\\"https://www.bilibili.com/video/BV1eV411u7cg\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://www.bilibili.com/video/BV1eV411u7cg</a></p>\\n<p>技术文档：<a href=\\"https://d9bp4nr5ye.feishu.cn/wiki/HX50wdHFyiFoLrkfEAAcTBdinvh\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://d9bp4nr5ye.feishu.cn/wiki/HX50wdHFyiFoLrkfEAAcTBdinvh</a></p>","autoDesc":true}');export{D as comp,f as data};
