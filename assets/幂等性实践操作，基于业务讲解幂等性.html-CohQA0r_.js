import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as s,o as a,b as n}from"./app-Q2dkLXYo.js";const t={},l=n(`<br><p>之前面试也提到过关于幂等的问题，自己百度查了关于它的概念倒是很简单，但就一直不是很理解，今天和人讨论一下，然后再自己结合实际理解了一下。</p><ul><li><p>幂等概念来自数学，表示N次变换和1次变换的结果是相同的。这里讨论在某些场景下，客户端在调用服务没有达到预期结果时，会进行多次调用，为避免多次重复的调用对服务资源产生副作用，服务提供者会承诺满足幂等。</p></li><li><p>HTTP/1.1中对幂等性的定义是：一次和多次请求某一个资源对于资源本身应该具有同样的副作用（网络超时等问题除外）。也就是说，其任意多次执行对资源本身所产生的影响均与一次执行的影响相同。</p></li><li><p>简单来说就是：多次调用同一个接口，返回的结果是同样的。</p></li></ul><p>其实我们在实际代码中可能已经做过了<strong>幂等</strong>但是因为不知道这个概念导致我们不清楚（其实这样的情况还挺多）</p><br><p>单说概念可能大家并不是很理解，下面举两个例子，一个是我同事给我讲的，一个是我之前的实际例子。</p><h3 id="一、" tabindex="-1"><a class="header-anchor" href="#一、"><span>一、</span></a></h3><blockquote><p>在工单系统里面有一个接单的操作，一个工单可以派发给多个人，每个人都可以接单，规则是谁先接到就算谁的。<br> 如果我们不对其进行<strong>幂等处理</strong>那就会发生第二个人覆盖了第一个人的接单。 <br></p></blockquote><p><strong>错误操作如下：</strong> 工单下派给A、B两个人，然后A、B同时进入接单界面，这时候A接单了，但是B来电话了，他去接电话，接完电话他还停留在接单界面，然后他也接单了。</p><p><strong>改造如下：</strong></p><ol><li>每次进来先获取Redis里面的 key，判断是否存在，如果不存在就继续往下走</li><li>判断当前工单的状态，是否等于<strong>待接收</strong>，如果是继续往下走</li><li>使用工单id作为 key 存入Redis里面去（分布式锁实现）</li><li>执行一系列的业务逻辑</li><li>删除Redis里面的key</li></ol><p><strong>伪代码实现：</strong></p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;"> String</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;"> fun</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> id) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">RedisUtils</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(id)</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> !=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;该工单已被接收&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">    }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">    RedisUtils</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">put</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(id,id);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">testDao</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">getStateById</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(id)</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> !=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> 3</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">        return</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;该工单已被接收&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">    }</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    // 执行具体的业务逻辑</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#7F848E;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">    //......</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">RedisUtils</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">get</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(id)</span><span style="--shiki-light:#D73A49;--shiki-dark:#56B6C2;"> !=</span><span style="--shiki-light:#005CC5;--shiki-dark:#D19A66;"> null</span><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E5C07B;">        RedisUtils</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#61AFEF;">delete</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">(id);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">    }</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#032F62;--shiki-dark:#98C379;"> &quot;操作成功&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><br><h3 id="二、" tabindex="-1"><a class="header-anchor" href="#二、"><span>二、</span></a></h3><blockquote><p>这是一个典型的支付场景：用户支付下单场景，理论上一个订单用户只能支付一次，但是如果不做幂等处理就可能支付多次。</p></blockquote><p><strong>错误操作如下：</strong></p><p>因为网络或者各种原因卡住了，用户刷新页面再次点击支付，这样会造成支付两次的情况</p><p><strong>改造如下：</strong></p><ol><li>每次点击支付后锁住按钮。（但是刷新页面会导致解开锁）</li><li>支付完成后返回给前端，前端跳到支付成功页面。</li><li>每次进来先获取Redis里面的 key，判断是否存在，如果不存在就继续往下走</li><li>判断当前订单的状态，是否等于<strong>待支付</strong>，如果是继续往下走</li><li>使用订单id作为 key 存入Redis里面去（分布式锁实现）</li><li>执行一系列的业务逻辑</li><li>删除Redis里面的key</li></ol><p>这个和上面的代码实现如出一辙就不再写了。</p>`,21),e=[l];function p(h,k){return a(),s("div",null,e)}const o=i(t,[["render",p],["__file","幂等性实践操作，基于业务讲解幂等性.html.vue"]]),E=JSON.parse('{"path":"/19%E5%9C%BA%E6%99%AF%E9%A2%98/02%E7%90%86%E8%AE%BA%E5%85%88%E8%A1%8C/%E5%B9%82%E7%AD%89%E6%80%A7%E5%AE%9E%E8%B7%B5%E6%93%8D%E4%BD%9C%EF%BC%8C%E5%9F%BA%E4%BA%8E%E4%B8%9A%E5%8A%A1%E8%AE%B2%E8%A7%A3%E5%B9%82%E7%AD%89%E6%80%A7.html","title":"【初】幂等性实践操作，基于业务讲解幂等性","lang":"zh-CN","frontmatter":{"title":"【初】幂等性实践操作，基于业务讲解幂等性","shortTitle":"【初】基于业务讲解幂等性","date":"2021-07-16T16:47:09.000Z","category":["初级"],"order":1,"description":"之前面试也提到过关于幂等的问题，自己百度查了关于它的概念倒是很简单，但就一直不是很理解，今天和人讨论一下，然后再自己结合实际理解了一下。 幂等概念来自数学，表示N次变换和1次变换的结果是相同的。这里讨论在某些场景下，客户端在调用服务没有达到预期结果时，会进行多次调用，为避免多次重复的调用对服务资源产生副作用，服务提供者会承诺满足幂等。 HTTP/1.1...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/19%E5%9C%BA%E6%99%AF%E9%A2%98/02%E7%90%86%E8%AE%BA%E5%85%88%E8%A1%8C/%E5%B9%82%E7%AD%89%E6%80%A7%E5%AE%9E%E8%B7%B5%E6%93%8D%E4%BD%9C%EF%BC%8C%E5%9F%BA%E4%BA%8E%E4%B8%9A%E5%8A%A1%E8%AE%B2%E8%A7%A3%E5%B9%82%E7%AD%89%E6%80%A7.html"}],["meta",{"property":"og:site_name","content":"小道仙Java笔记"}],["meta",{"property":"og:title","content":"【初】幂等性实践操作，基于业务讲解幂等性"}],["meta",{"property":"og:description","content":"之前面试也提到过关于幂等的问题，自己百度查了关于它的概念倒是很简单，但就一直不是很理解，今天和人讨论一下，然后再自己结合实际理解了一下。 幂等概念来自数学，表示N次变换和1次变换的结果是相同的。这里讨论在某些场景下，客户端在调用服务没有达到预期结果时，会进行多次调用，为避免多次重复的调用对服务资源产生副作用，服务提供者会承诺满足幂等。 HTTP/1.1..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-08-10T14:31:36.000Z"}],["meta",{"property":"article:author","content":"小道仙97"}],["meta",{"property":"article:published_time","content":"2021-07-16T16:47:09.000Z"}],["meta",{"property":"article:modified_time","content":"2024-08-10T14:31:36.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"【初】幂等性实践操作，基于业务讲解幂等性\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2021-07-16T16:47:09.000Z\\",\\"dateModified\\":\\"2024-08-10T14:31:36.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"小道仙97\\",\\"url\\":\\"https://java.xdx97.com\\"}]}"]]},"headers":[{"level":3,"title":"一、","slug":"一、","link":"#一、","children":[]},{"level":3,"title":"二、","slug":"二、","link":"#二、","children":[]}],"git":{"createdTime":1723300296000,"updatedTime":1723300296000,"contributors":[{"name":"ziyangtao","email":"ziyangtao@distinctclinic.com","commits":1}]},"readingTime":{"minutes":3.2,"words":960},"filePathRelative":"19场景题/02理论先行/幂等性实践操作，基于业务讲解幂等性.md","localizedDate":"2021年7月17日","excerpt":"<br>\\n<p>之前面试也提到过关于幂等的问题，自己百度查了关于它的概念倒是很简单，但就一直不是很理解，今天和人讨论一下，然后再自己结合实际理解了一下。</p>\\n<ul>\\n<li>\\n<p>幂等概念来自数学，表示N次变换和1次变换的结果是相同的。这里讨论在某些场景下，客户端在调用服务没有达到预期结果时，会进行多次调用，为避免多次重复的调用对服务资源产生副作用，服务提供者会承诺满足幂等。</p>\\n</li>\\n<li>\\n<p>HTTP/1.1中对幂等性的定义是：一次和多次请求某一个资源对于资源本身应该具有同样的副作用（网络超时等问题除外）。也就是说，其任意多次执行对资源本身所产生的影响均与一次执行的影响相同。</p>\\n</li>\\n<li>\\n<p>简单来说就是：多次调用同一个接口，返回的结果是同样的。</p>\\n</li>\\n</ul>","autoDesc":true}');export{o as comp,E as data};
