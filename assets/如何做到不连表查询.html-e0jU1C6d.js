import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,o as i,d as l}from"./app-BmzbDSP2.js";const a={},p=l('<br><h2 id="一" tabindex="-1"><a class="header-anchor" href="#一"><span>一</span></a></h2><p>20年看阿里Java开发手册里面提到表连接不要超过三张，我一直把这个当作笑话，直到目前为止我职业生涯连表查询（业务查询非报表）最多的有二三十张。</p><p>如何做到不连表查询，这个问题一直困扰我许久。</p><br><p>举一个例子，在上家公司有一个列表叫线索列表，列表展示的字段有60多个，离谱的的是这里面很多字段都要筛选。下面的每一个字段都要去关联一张或多张表才可以做到筛选</p><ol><li>是否关注公众号</li><li>是否添加企微</li><li>用户标签</li><li>最后一次call时间</li><li>意向分</li><li>用户触达次数</li><li>重点客户标签</li><li>...</li></ol><p>在离职不久前，还接到了一个离谱的需求：要求记录用户的每次访问标记，并且可以支持随意标记搜索，比如用户访问了A、B、C、D， 那么搜索其中任意一个就都可以搜索出来这个用户。</p><p>这些表里面有很多是百万、千万级别的。之所以系统还能运行，全靠硬件。</p><br><br><h2 id="二" tabindex="-1"><a class="header-anchor" href="#二"><span>二</span></a></h2><p>最近一直在学习微服务的知识，加上入职的新公司业务，发现连表不超过三张其实是可以实现的，我们现在就是这样做的。</p><ol><li>思考每一个字段是否真的有必要在列表展示（列表长度有限，寸土寸金）</li><li>纵观阿里云控制台列表发现几乎没有一个列表让你可以不限制条件去搜索的</li><li>搜索的时候真的需要模糊吗？想一想作为系统的使用者，假如有个通过用户手机号来搜索的功能，你去哪里拿到用户一半的手机号？</li><li>微服务的本质是每个服务维护属于自己的表数据，其它服务应当通过RPC来获取数据</li><li>字典数据统一先查询，再匹配（待完善）</li></ol><p>关于第4点可以举一个例子，比如我们有一个新的服务叫套餐服务，有一个套餐列表，套餐表里面有user_id，现在我们要通过 user_id、user_phone、user_no来搜索用户。</p><p>正常情况下，我的第一反应就是 left join user 搞定，如果是这样，那你就多连了一张表，而且这个user表在你的套餐服务理论上是没资格去访问它的。</p><p>换个思路，先通过 keyword（id、phone、no 用户输入的），去用户服务获取id，然后再用id去在套餐表使用 in（这里完全不用考虑in的条件会不会太多，永远不会）。</p><p><br><br></p><p>这看起来一点也不简单，实际上也非常的困难。</p><p><br><br></p><h2 id="三、" tabindex="-1"><a class="header-anchor" href="#三、"><span>三、</span></a></h2><p>再来谈一下微服务架构，我个人觉得这里面最重要的是服务的划分，要坚持只有属于服务的表，才可以对其进行操作，A服务绝不能访问B服务的表（这个访问不单单指操作数据，连查询数据都不要）</p><p>如果A服务需要B服务的数据，通常🈶️两个办法</p><ol><li>B服务提供接口给A服务调用（Dubbo是一个很好的实践）</li><li>开辟一个C服务作为聚合服务，必要的时候才可以少量的连表</li></ol><p><br><br></p><p>最近公司的前端在做一个事情就是，写node作为聚合服务，让node去调用A、B服务来做数据的聚合。（这个好像也是阿里开创的）</p><br><p>注：使用dubbo看似和openFegin一样，都是和本地一样的调用，但实际上差别很大openFegin还是用的Http协议，dubbo的性能要强很多。</p><br><h2 id="四" tabindex="-1"><a class="header-anchor" href="#四"><span>四</span></a></h2><br><p>如果我们没办法说服业务方，也有一些很拙劣的办法来达到业务目的。</p><p>比如上面说的是否关注公众号， 可以把这个字段冗余到线索表里面，每次用户关注/取消关注都实时去更新线索表的字段。</p><p>具体的操作有两种方式</p><ol><li>埋点，在关注/取消关注的地方发出一个事件，让线索服务感知然后去更新</li><li>监控数据库（本质上也就是监控binlog），当数据库的这个字段发生了变动发出事件，这个有很多的工具 比如 maxwell</li></ol><p>这种方式也只能解决一对一的关系数据，如果是一对多还是要连表来查询。但是我们同样可以洗表，把N张表、洗成一张。</p><p>这种代价其实是很大的，要维护数据的一致性。</p><br><p>另外一个相对好点的方式是用搜索引擎，比如ES、MongoDB它们并非传统的关系型数据库，数据扩展性相对高一些，但依旧要面临数据的一致性问题。</p>',39),o=[p];function r(n,c){return i(),t("div",null,o)}const h=e(a,[["render",r],["__file","如何做到不连表查询.html.vue"]]),m=JSON.parse('{"path":"/19%E5%9C%BA%E6%99%AF%E9%A2%98/02%E7%90%86%E8%AE%BA%E5%85%88%E8%A1%8C/%E5%A6%82%E4%BD%95%E5%81%9A%E5%88%B0%E4%B8%8D%E8%BF%9E%E8%A1%A8%E6%9F%A5%E8%AF%A2.html","title":"【中】如何做到不连表查询","lang":"zh-CN","frontmatter":{"title":"【中】如何做到不连表查询","shortTitle":"【中】如何做到不连表查询","index":false,"date":"2024-07-16T21:33:27.000Z","category":["【中级】"],"description":"一 20年看阿里Java开发手册里面提到表连接不要超过三张，我一直把这个当作笑话，直到目前为止我职业生涯连表查询（业务查询非报表）最多的有二三十张。 如何做到不连表查询，这个问题一直困扰我许久。 举一个例子，在上家公司有一个列表叫线索列表，列表展示的字段有60多个，离谱的的是这里面很多字段都要筛选。下面的每一个字段都要去关联一张或多张表才可以做到筛选 ...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/19%E5%9C%BA%E6%99%AF%E9%A2%98/02%E7%90%86%E8%AE%BA%E5%85%88%E8%A1%8C/%E5%A6%82%E4%BD%95%E5%81%9A%E5%88%B0%E4%B8%8D%E8%BF%9E%E8%A1%A8%E6%9F%A5%E8%AF%A2.html"}],["meta",{"property":"og:site_name","content":"小道仙Java笔记"}],["meta",{"property":"og:title","content":"【中】如何做到不连表查询"}],["meta",{"property":"og:description","content":"一 20年看阿里Java开发手册里面提到表连接不要超过三张，我一直把这个当作笑话，直到目前为止我职业生涯连表查询（业务查询非报表）最多的有二三十张。 如何做到不连表查询，这个问题一直困扰我许久。 举一个例子，在上家公司有一个列表叫线索列表，列表展示的字段有60多个，离谱的的是这里面很多字段都要筛选。下面的每一个字段都要去关联一张或多张表才可以做到筛选 ..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-07-20T08:07:38.000Z"}],["meta",{"property":"article:author","content":"小道仙97"}],["meta",{"property":"article:published_time","content":"2024-07-16T21:33:27.000Z"}],["meta",{"property":"article:modified_time","content":"2024-07-20T08:07:38.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"【中】如何做到不连表查询\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-07-16T21:33:27.000Z\\",\\"dateModified\\":\\"2024-07-20T08:07:38.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"小道仙97\\",\\"url\\":\\"https://java.xdx97.com\\"}]}"]]},"headers":[{"level":2,"title":"一","slug":"一","link":"#一","children":[]},{"level":2,"title":"二","slug":"二","link":"#二","children":[]},{"level":2,"title":"三、","slug":"三、","link":"#三、","children":[]},{"level":2,"title":"四","slug":"四","link":"#四","children":[]}],"git":{"createdTime":1721461625000,"updatedTime":1721462858000,"contributors":[{"name":"ziyangtao","email":"ziyangtao@distinctclinic.com","commits":5}]},"readingTime":{"minutes":4.37,"words":1310},"filePathRelative":"19场景题/02理论先行/如何做到不连表查询.md","localizedDate":"2024年7月17日","autoDesc":true}');export{h as comp,m as data};
