import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,o as i,b as e}from"./app-CqoDLIc2.js";const n="/assets/25_3-CA28UXtD.png",s="/assets/25_4-T0e8N-J4.png",r="/assets/25_5-vCmqY8k3.png",l={},p=e('<br><h2 id="一、问题解决" tabindex="-1"><a class="header-anchor" href="#一、问题解决"><span>一、问题解决</span></a></h2><figure><img src="'+n+'" alt="在这里插入图片描述" tabindex="0" loading="lazy"><figcaption>在这里插入图片描述</figcaption></figure><p>在使用maven打包的时候，报了上面这个错，简单来说就是找不到某个依赖，这是因为我们在构建子父工程的时候，子类打包找不到父类的依赖。</p><p>一般我们只需要重新打开父类，然后执行 <code>mvn install</code> ，再去子类里面重新依赖一下就好了。</p><p>但是我这个父类是依赖的远程仓库，我通过maven也把它拉到了本地仓库，但是依旧不行，最后发现原因是因为，我本地安装了两个maven，M1和M2，我在配置环境变量的时候配置的是M1地址。</p><p>以前我打包都是使用下面这个地方</p><figure><img src="'+s+`" alt="在这里插入图片描述" tabindex="0" loading="lazy"><figcaption>在这里插入图片描述</figcaption></figure><p>这里最后的打包结果都是在本地的<code>target</code>目录下面创建一个 xxxx.jar，拿到这个jar丢到服务器上面就行了。都是打包的单体项目，不存在子父的依赖所以不存在问题。</p><p>但是现在需要在本地打包然后把打包结果推送到远程的仓库 <code>mvn clean package -DskipTests -Ptest</code>，这个时候就<strong>必须要使用你的环境变量的maven</strong>。</p><br><h2 id="二、relativepath" tabindex="-1"><a class="header-anchor" href="#二、relativepath"><span>二、relativePath</span></a></h2><p>在解决问题的过程中，认识到了下面这个标签，它是用来指定父类pom的地址，</p><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="--shiki-light:#24292e;--shiki-dark:#abb2bf;--shiki-light-bg:#fff;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes github-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">parent</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;cn.ideamake&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;parent-starter&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">version</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;1.2.1.1-SNAPSHOT&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">version</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">relativePath</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;../pom.xml&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">relativePath</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#E06C75;">parent</span><span style="--shiki-light:#24292E;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>默认顺序：relativePath &gt; 本地仓库 &gt; 远程仓库</strong></p><p>一般我们可以不用配置它，它会先去上一级去找，找不到就去本地仓库，本地仓库找不到就会去远程仓库</p><p>但这里有个意外，如果我们本次仓库里面有这个文件，那就说明最后不会读取本地，而是去读取远程仓库</p><figure><img src="`+r+'" alt="在这里插入图片描述" tabindex="0" loading="lazy"><figcaption>在这里插入图片描述</figcaption></figure>',18),o=[p];function h(d,c){return i(),a("div",null,o)}const m=t(l,[["render",h],["__file","Non-resolvable parent POM for Could not find artifact and ‘parent.relativePath‘ points at wrong loca.html.vue"]]),v=JSON.parse('{"path":"/23%E5%BC%82%E5%B8%B8%E9%9B%86%E5%90%88/Non-resolvable%20parent%20POM%20for%20Could%20not%20find%20artifact%20and%20%E2%80%98parent.relativePath%E2%80%98%20points%20at%20wrong%20loca.html","title":"【初】Non-resolvable parent POM for Could not find artifact and ‘parent.relativePath‘ points at wrong loca","lang":"zh-CN","frontmatter":{"title":"【初】Non-resolvable parent POM for Could not find artifact and ‘parent.relativePath‘ points at wrong loca","shortTitle":"【初】Maven打包子类打包找不到父类的依赖","index":true,"date":"2021-11-07T14:43:15.000Z","category":["初级","异常"],"tag":["Maven"],"order":1,"description":"一、问题解决 在这里插入图片描述在这里插入图片描述 在使用maven打包的时候，报了上面这个错，简单来说就是找不到某个依赖，这是因为我们在构建子父工程的时候，子类打包找不到父类的依赖。 一般我们只需要重新打开父类，然后执行 mvn install ，再去子类里面重新依赖一下就好了。 但是我这个父类是依赖的远程仓库，我通过maven也把它拉到了本地仓库，...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/23%E5%BC%82%E5%B8%B8%E9%9B%86%E5%90%88/Non-resolvable%20parent%20POM%20for%20Could%20not%20find%20artifact%20and%20%E2%80%98parent.relativePath%E2%80%98%20points%20at%20wrong%20loca.html"}],["meta",{"property":"og:site_name","content":"小道仙Java笔记"}],["meta",{"property":"og:title","content":"【初】Non-resolvable parent POM for Could not find artifact and ‘parent.relativePath‘ points at wrong loca"}],["meta",{"property":"og:description","content":"一、问题解决 在这里插入图片描述在这里插入图片描述 在使用maven打包的时候，报了上面这个错，简单来说就是找不到某个依赖，这是因为我们在构建子父工程的时候，子类打包找不到父类的依赖。 一般我们只需要重新打开父类，然后执行 mvn install ，再去子类里面重新依赖一下就好了。 但是我这个父类是依赖的远程仓库，我通过maven也把它拉到了本地仓库，..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-08-10T14:31:36.000Z"}],["meta",{"property":"article:author","content":"小道仙97"}],["meta",{"property":"article:tag","content":"Maven"}],["meta",{"property":"article:published_time","content":"2021-11-07T14:43:15.000Z"}],["meta",{"property":"article:modified_time","content":"2024-08-10T14:31:36.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"【初】Non-resolvable parent POM for Could not find artifact and ‘parent.relativePath‘ points at wrong loca\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2021-11-07T14:43:15.000Z\\",\\"dateModified\\":\\"2024-08-10T14:31:36.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"小道仙97\\",\\"url\\":\\"https://java.xdx97.com\\"}]}"]]},"headers":[{"level":2,"title":"一、问题解决","slug":"一、问题解决","link":"#一、问题解决","children":[]},{"level":2,"title":"二、relativePath","slug":"二、relativepath","link":"#二、relativepath","children":[]}],"git":{"createdTime":1723300296000,"updatedTime":1723300296000,"contributors":[{"name":"ziyangtao","email":"ziyangtao@distinctclinic.com","commits":1}]},"readingTime":{"minutes":1.78,"words":533},"filePathRelative":"23异常集合/Non-resolvable parent POM for Could not find artifact and ‘parent.relativePath‘ points at wrong loca.md","localizedDate":"2021年11月7日","excerpt":"<br>\\n<h2>一、问题解决</h2>\\n<figure><figcaption>在这里插入图片描述</figcaption></figure>\\n<p>在使用maven打包的时候，报了上面这个错，简单来说就是找不到某个依赖，这是因为我们在构建子父工程的时候，子类打包找不到父类的依赖。</p>\\n<p>一般我们只需要重新打开父类，然后执行 \\t<code>mvn install</code> ，再去子类里面重新依赖一下就好了。</p>\\n<p>但是我这个父类是依赖的远程仓库，我通过maven也把它拉到了本地仓库，但是依旧不行，最后发现原因是因为，我本地安装了两个maven，M1和M2，我在配置环境变量的时候配置的是M1地址。</p>","autoDesc":true}');export{m as comp,v as data};
